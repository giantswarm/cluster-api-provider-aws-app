name: cluster-api-provider-aws
# This refers to a release in the Giant Swarm fork. The fork closely follows upstream releases unless hotfixes are
# needed. Please read https://github.com/giantswarm/cluster-api-provider-aws/blob/main/README.md on how to create a
# release. Please include the short commit SHA in the tag name, such as `v2.0.2-gs-123abcd`. After changing this
# tag, please run `make generate` to update CRDs and other manifests.

# Changes in this tag include upstream v2.7.x with additional:
#   * Giant Swarm fork modifications (https://github.com/giantswarm/cluster-api-provider-aws/pull/607/commits/08280ec433b63119d652b39c06d9a4b78d5a9055)
#   * S3 user data support for AWSMachinePools (https://github.com/giantswarm/cluster-api-provider-aws/pull/607/commits/905c44ab2afde5e2d4e983066ab9856859a0de47)
#   * Filter out AWS internal tags when reconciling (https://github.com/kubernetes-sigs/cluster-api-provider-aws/pull/5181/commits/4c61f2b5a01e0b67e647868a066dda1947b97d4c)
#   * Support EC2 lifecycle hooks for machine pools (https://github.com/giantswarm/cluster-api-provider-aws/pull/613)
#   * Tags defined in subnet spec should be applied (https://github.com/giantswarm/cluster-api-provider-aws/pull/615)
#   * Only manage security groups for ENIs tagged by CAPA (https://github.com/giantswarm/cluster-api-provider-aws/pull/616)
#   * Support additional security group ingress rules for all nodes (https://github.com/giantswarm/cluster-api-provider-aws/pull/617)
#   * Add karpenter IAM Roles to the S3 bucket policy so that karpenter nodes can read userdata (https://github.com/giantswarm/cluster-api-provider-aws/pull/618)
#   * Avoid reconciling AWSMachinePools when only the status field has changed (https://github.com/giantswarm/cluster-api-provider-aws/pull/622)
#   * Wire logger into machine scope (https://github.com/giantswarm/cluster-api-provider-aws/pull/621)
#   * Don't overwrite subnet spec tags with AWS tags (https://github.com/kubernetes-sigs/cluster-api-provider-aws/pull/5474)
#   * Launchtemplate needs to be updated if spot options are changed (https://github.com/kubernetes-sigs/cluster-api-provider-aws/pull/5496)
#   * Check control plane version skew before creating new launch template version (https://github.com/giantswarm/cluster-api-provider-aws/pull/624)
#   * Remove placeholder CA bundle (https://github.com/giantswarm/cluster-api-provider-aws/pull/625)
#   * Add feature gate environment variable for machine pool machines (https://github.com/giantswarm/cluster-api-provider-aws/pull/627)
#   * Add AWSMachines to back the EC2 instances in AWSMachinePools and AWSManagedMachinePools (https://github.com/giantswarm/cluster-api-provider-aws/pull/629)
#   * Only try to delete AWSMachine bootstrap data for non-machine pool machines (https://github.com/giantswarm/cluster-api-provider-aws/pull/630)
#   * Fix cluster upgrade version skew (https://github.com/giantswarm/cluster-api-provider-aws/pull/631)
#   * Giant Swarm specific, temporary hack: allow fine-grained control which workload clusters get reconciled with the MachinePool Machines feature (https://github.com/giantswarm/cluster-api-provider-aws/pull/633)
#   * Add update permission for `AWSMachinePool` finalizers as needed by `OwnerReferencesPermissionEnforcement` for setting `BlockOwnerDeletion: true` on AWSMachinePool Machines (https://github.com/giantswarm/cluster-api-provider-aws/pull/634)
tag: v2.7.1-gs-b9fedc5e9

registry:
  domain: gsoci.azurecr.io

image:
  name: giantswarm/cluster-api-aws-controller

ciliumNetworkPolicy:
  enabled: false

crdConvertOnly: true
crdInstall:
  kubectl:
    image: "giantswarm/kubectl"
    tag: "1.24.10"

capaFeatureGates:
  machinePoolMachines: false
  # Giant Swarm specific to introduce the `MachinePoolMachines` feature gate gradually. This is a regex. If not empty and matching the cluster name, our CAPA fork reconciles it with the feature gate turned on (requiring `capaFeatureGates.machinePoolMachines=true`). This and the corresponding fork code will be removed once all MCs have the feature gate turned on.
  #
  # IMPORTANT: If this regex is left empty, the previous default behavior applies. That means
  #            if `capaFeatureGates.machinePoolMachines=true`, the feature gate is enabled
  #            for *all* workload clusters (and also the MC itself)!
  #            As first migration step, it's recommended to first configure
  #            `capaFeatureGates.machinePoolMachinesOnlyForClusterNameRegex=^(NOT-ON-ANY-CLUSTER-YET)$`
  #            and check the logs. The line `MachinePool Machines feature gate check for cluster <namespace>/<name>: allow=false`
  #            means that a cluster won't be reconciled with the feature, which is a good
  #            starting point. Then, you can set `capaFeatureGates.machinePoolMachines=true`
  #            and a regex which actually selects some or all clusters (don't forget the MC's name,
  #            in addition to WC names).
  machinePoolMachinesOnlyForClusterNameRegex: ""

aws:
  arn: defaultARN

watchfilter: capi

serviceType: managed

provider:
  region: defaultRegion
  capi:
    accessKeyID: defaultID
    secretAccessKey: defaultKey

serviceMonitor:
  enabled: true

verticalPodAutoscaler:
  enabled: true

global:
  podSecurityStandards:
    enforced: false
